Group:
  Martin Alternburg (altenbur@stanford.edu)
  Swathi Iyer (swathii@stanford.edu)

Description:

Overall, our state transitions followed Figure 4.1 of the handout. We always start in the STATE_WAIT state, and 
begin our calculations on go. On go, we transition to loading in the first three loads, which are states 
STATE_LOADING1, STATE_LOADING2, and STATE_LOADING3 states. After STATE_LOADING3, we transition to STATE_CALC,
to calculate the first convolution. We then continue to go back and forth between STATE_PROCESSING_CALC and 
STATE_PROCESSING_LOADSS, to slide down the filter over the image, and to calculate the convolution. When we 
get to the second-to-last filter position, rather than transitioning to STATE_PROCESSING_LOADSS from 
STATE_PROCESSING_CALC, we go to STATE_PROCESSING_LOADSS_LAST, and then to STATE_PROCESSING_CALC_LAST. In 
STATE_PROCESSING_CALC_LAST, we check whether we have passed the filter over all the columns. If so,
we transition to STATE_DONE. If not, we transition to STATE_LOADING1 to again start at the top of the image. 

We call `SOBEL_SHIFT_OP_SHIFT_ROW every time we want to load in a row. This is in the following states:
STATE_LOADING1, STATE_LOADING2, STATE_LOADING3, STATE_PROCESSING_LOADSS, STATE_PROCESSING_LOADS_LAST.

We have our row counter represent the position of the top of the filter (0-indexed). Thus, we only increment
the row counter with each slide of the filter (after STATE_PROCESSING_CALC), and reset it to 0 in 
STATE_PROCESSING_CALC_LAST. Similarly, we have our col_stip represent the column index of the start of the 
filters, so after STATE_PROCESSING_CALC_LAST, we reset col_strip_next to next_col_strip, where next_col_strip
is col_strip + NUM_ACCELERATORS.

Implementing buf_read_offset was the most difficult variable to work with. We know that the variable needs to 
set to the value needed in the next cycle. Originally, it was the value needed for the instruct two cycles
ahead, but we were able to fix this by setting sctl2srt_read_addr to buf_read_offset_next. At first,  
buf_read_offset was always set to row_counter_next * control_n_columns + col_strip. However, it was difficult
and complex to always increment and decrement the row counter. Therefore, the row counter is the same for 
each iteration that produces an output pixel, and we add constants to row_counter when calculating the 
memory address. 

Implementing buf_write_offset was pretty similar. One bug that we spent quite some time looking over was the
fact that we multiply our row_counter by (control_n_cols - 2) rather than control_n_cols. This is because the
output image has a smaller size. Before making this change, we were writing onto invalid data space since
our write addresses would be skewed. 

We only have our buf_write_en on after calculation stages, when we need to write the calculated data to the 
output. The transitions to buf_write_en going high happen in STATE_PROCESSING_CALC and STATE_PROCESSING_CALC_LAST.

Our accelerator is pretty standard in function. We only had to add a few more variables. One important thing
for us was adding the pixel values (for the first step of the convolution) into a signed reg. This way,
we could determine whether the value is less than zero, and use a ternary operator to get our absolute
value, which is an unsigned reg. We initially tried to avoid using a signed reg, but realized you can't 
keep track of the overflows and underflows without considerable overhead. We then saturated the value
to 255 if the sum was higher than that, and added/saturated the sum of the x and the y convolutions. 
